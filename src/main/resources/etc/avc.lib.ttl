@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix spin:  <http://spinrdf.org/spin#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix sp:    <http://spinrdf.org/sp#> .
@prefix spl:   <http://spinrdf.org/spl#> .
@prefix avc:   <https://github.com/avicomp/spin#> .
@prefix afn:   <http://jena.hpl.hp.com/ARQ/function#> .

<https://github.com/avicomp/lib>  a   owl:Ontology ;
        rdfs:comment     "An additional library of functions that can be expressed through SPARQL or the other functions from a standard spin-library.\nIt is assumed that this ontology will not be included to the \"owl:import\" statement of mappings, produces by the API.\nInstead, any of the functions below will be printed directly to the graph of mapping, which use that function, and therefore the library can be considered just as templates collection." ;
        owl:imports      <https://github.com/avicomp/spin> ;
        owl:versionIRI   <https://github.com/avicomp/lib#1.0> ;
        owl:versionInfo  "version 1.0" .

avc:UUID  a                 spinmap:TargetFunction ;
        rdfs:comment        "A target function.\nGenerates an IRI from the UUID URN scheme based on source individual MD5 sum.\nEach call of AVC:UUID returns the same UUID IRI.\nExample: <urn:uuid:f3bf688d44e249fade9ca8ca23e29884>.\nCan work both with named and anonymous individuals." ;
        rdfs:label          "MD5 UUID" ;
        rdfs:seeAlso        <https://www.w3.org/TR/sparql11-query/#func-uuid> , sp:UUID ;
        rdfs:subClassOf     spinmap:TargetFunctions ;
        avc:optimize        "com.github.owlcs.map.spin.functions.avc.UUID" ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ a        sp:iri ;
                                                      sp:arg1  [ sp:varName  "uri" ]
                                                    ]
                                                  ) ;
                              sp:where            ( [ a              sp:Bind ;
                                                      sp:expression  [ a        sp:if ;
                                                                       sp:arg1  [ a        sp:isBlank ;
                                                                                  sp:arg1  [ sp:varName  "source" ]
                                                                                ] ;
                                                                       sp:arg2  [ a        afn:bnode ;
                                                                                  sp:arg1  [ sp:varName  "source" ]
                                                                                ] ;
                                                                       sp:arg3  [ a        sp:str ;
                                                                                  sp:arg1  [ sp:varName  "source" ]
                                                                                ]
                                                                     ] ;
                                                      sp:variable    [ sp:varName  "s" ]
                                                    ]
                                                    [ a              sp:Bind ;
                                                      sp:expression  [ a        sp:md5 ;
                                                                       sp:arg1  [ sp:varName  "s" ]
                                                                     ] ;
                                                      sp:variable    [ sp:varName  "value" ]
                                                    ]
                                                    [ a              sp:Bind ;
                                                      sp:expression  [ a        sp:concat ;
                                                                       sp:arg1  "urn:uuid:" ;
                                                                       sp:arg2  [ sp:varName  "value" ]
                                                                     ] ;
                                                      sp:variable    [ sp:varName  "uri" ]
                                                    ]
                                                  )
                            ] ;
        spin:returnType     rdfs:Resource ;
        spinmap:shortLabel  "UUID" .

avc:IRI  a                  spinmap:TargetFunction ;
        rdfs:comment        "A target function.\nReturns an IRI as a single target resource (individual).\nPlease note: inference will create only one target individual per rule with merging all sources to it." ;
        rdfs:label          "creates IRI resource" ;
        rdfs:seeAlso        sp:iri , <https://www.w3.org/TR/sparql11-query/#func-iri> ;
        rdfs:subClassOf     spinmap:TargetFunctions ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ a        sp:iri ;
                                                      sp:arg1  spin:_arg1
                                                    ]
                                                  ) ;
                              sp:where            ()
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "An IRI (xsd:string)" ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  xsd:string
                            ] ;
        spin:returnType     rdfs:Resource ;
        spinmap:shortLabel  "IRI" .

avc:self  a              spinmap:TargetFunction ;
        rdfs:seeAlso     spinmapl:self ;
        rdfs:subClassOf  spinmap:TargetFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "source" ]
                                               ) ;
                           sp:where            ( [ a              sp:Filter ;
                                                   sp:expression  [ a        sp:isIRI ;
                                                                    sp:arg1  [ sp:varName  "source" ]
                                                                  ]
                                                 ]
                                               )
                         ] ;
        spin:private     true ;
        spin:returnType  rdfs:Resource .

avc:groupConcat  a          spin:Function ;
        rdfs:comment        "An aggregate function to concatenate values from assertions with the same individual and property using specified separator.\nNotice: string natural sort order is used." ;
        rdfs:label          "Group concat" ;
        rdfs:subClassOf     avc:AggregateFunctions ;
        avc:runtime         "com.github.owlcs.map.spin.AdjustGroupConcatImpl" ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ a              sp:GroupConcat ;
                                                      sp:distinct    true ;
                                                      sp:expression  [ sp:varName  "r" ] ;
                                                      sp:separator   " + "
                                                    ]
                                                  ) ;
                              sp:where            ( [ a         sp:SubQuery ;
                                                      sp:query  [ a           sp:Select ;
                                                                  sp:orderBy  ( [ sp:varName  "r" ]
                                                                              ) ;
                                                                  sp:where    ( [ sp:object     [ sp:varName  "r" ] ;
                                                                                  sp:predicate  spin:_arg1 ;
                                                                                  sp:subject    spin:_arg2
                                                                                ]
                                                                              )
                                                                ]
                                                    ]
                                                  )
                            ] ;
        spin:constraint     [ a                 spl:Argument ;
                              rdfs:comment      "The separator to put between the two values." ;
                              spl:defaultValue  " + " ;
                              spl:optional      true ;
                              spl:predicate     spinmapl:separator ;
                              spl:valueType     xsd:string
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The predicate (property)" ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdf:Property
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The subject (instance)" ;
                              spl:optional   true ;
                              spl:predicate  sp:arg2 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        spin:returnType     xsd:string ;
        spinmap:shortLabel  "groupConcat" .

avc:withDefault  a          spin:Function ;
        rdfs:comment        "An ontology function for passing default values into a property mapping.\nIt is used for mapping data/annotation property assertion that absences in a particular source individual.\nLike spinmap:equals it returns the primary input property (?arg1) unchanged." ;
        rdfs:label          "With Default" ;
        rdfs:seeAlso        spinmap:equals , avc:asIRI ;
        rdfs:subClassOf     avc:PropertyFunctions ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( spin:_arg1 ) ;
                              sp:where            ()
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The property to get assertion value" ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdf:Property
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The default value to form a fake assertion on the source individual" ;
                              spl:predicate  sp:arg2 ;
                              spl:valueType  rdfs:Literal
                            ] ;
        spin:returnType     rdf:Property ;
        spinmap:shortLabel  "withDefault" .

avc:asIRI  a                spin:Function ;
        rdfs:comment        "An ontology function for passing property IRI as it is.\nAny other map-functions will actually accept a property assertion value found by mapping template call,\nwhile this function forces not to get a value but use a predicate IRI instead." ;
        rdfs:label          "As IRI" ;
        rdfs:seeAlso        avc:withDefault , spinmap:equals ;
        rdfs:subClassOf     avc:PropertyFunctions ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( spin:_arg1 ) ;
                              sp:where            ()
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The property to return as it is" ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdf:Property
                            ] ;
        spin:returnType     rdf:Property ;
        spinmap:shortLabel  "asIRI" .

avc:currentIndividual
        a                   spin:Function ;
        rdfs:comment        "A magic function to get current individual while inference.\nEquivalent to ?this\nPlease note: this function may not work as expected when using Composer." ;
        rdfs:label          "Get current individual" ;
        rdfs:subClassOf     avc:MagicFunctions ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "r" ]
                                                  ) ;
                              sp:where            ( [ a              sp:Bind ;
                                                      sp:expression  spin:_this ;
                                                      sp:variable    [ sp:varName  "r" ]
                                                    ]
                                                  )
                            ] ;
        spin:returnType     rdfs:Resource ;
        spinmap:shortLabel  "currentIndividual" .

avc:objectWithFilter  a     spin:Function ;
        rdfs:comment        "Gets the object of a given subject (?arg1) / predicate (?arg2) combination which match predicate (?arg3) / object (?arg4), returns a RDFNode." ;
        rdfs:label          "object with filter" ;
        rdfs:seeAlso        spl:object ;
        rdfs:subClassOf     spl:OntologyFunctions ;
        avc:optimize        "com.github.owlcs.map.spin.functions.avc.objectWithFilter" ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "object" ]
                                                  ) ;
                              sp:where            ( [ a            sp:Optional ;
                                                      sp:elements  ( [ a              sp:Bind ;
                                                                       sp:expression  spin:_arg4 ;
                                                                       sp:variable    [ sp:varName  "value" ]
                                                                     ]
                                                                   )
                                                    ]
                                                    [ a            sp:Optional ;
                                                      sp:elements  ( [ a              sp:Bind ;
                                                                       sp:expression  spin:_arg3 ;
                                                                       sp:variable    [ sp:varName  "property" ]
                                                                     ]
                                                                   )
                                                    ]
                                                    [ sp:object     [ sp:varName  "object" ] ;
                                                      sp:predicate  spin:_arg2 ;
                                                      sp:subject    spin:_arg1
                                                    ]
                                                    [ a              sp:Filter ;
                                                      sp:expression  [ a            sp:exists ;
                                                                       sp:elements  ( [ sp:object     [ sp:varName  "value" ] ;
                                                                                        sp:predicate  [ sp:varName  "property" ] ;
                                                                                        sp:subject    [ sp:varName  "object" ]
                                                                                      ]
                                                                                    )
                                                                     ]
                                                    ]
                                                  )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The subject to get the object from." ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The predicate to get the object of." ;
                              spl:predicate  sp:arg2 ;
                              spl:valueType  rdf:Property
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "Second predicate to filter results of select. Optional" ;
                              spl:optional   true ;
                              spl:predicate  sp:arg3 ;
                              spl:valueType  rdf:Property
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "Object (RDFNode) to filter results of select. Optional" ;
                              spl:optional   true ;
                              spl:predicate  sp:arg4 ;
                              spl:valueType  avc:undefined
                            ] ;
        spin:returnType     avc:undefined ;
        spinmap:shortLabel  "object" .